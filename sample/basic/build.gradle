plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.kapt)
}

android {
    namespace 'com.example.android.persistence'
    compileSdk 34

    defaultConfig {
        minSdk 24

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
}

dependencies {

    implementation project(':core:basic')

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.appcompat.resources
    implementation libs.androidx.activity
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.annotation
    implementation libs.androidx.annotation.experimental
    implementation libs.androidx.datastore.preferences
    implementation libs.androidx.graphics.shapes

    // Kotlin components
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android


    implementation libs.androidx.cardview
    //实现 Material Design 抽屉式导航栏 widget
    implementation libs.drawerlayout
    implementation libs.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.viewpager2
    // To use the Animator APIs
    implementation libs.androidx.core.animation
    // Java language implementation
    implementation libs.androidx.transition
    // Kotlin
    implementation libs.androidx.transition.ktx

    //让库能够提前预填充要由 ART 读取的编译轨迹。
    implementation libs.androidx.profileinstaller
    //将跟踪事件写入系统跟踪缓冲区。
    implementation libs.androidx.tracing.ktx



    // Lifecycle components
    // Lifecycles only (without ViewModel or LiveData)
    implementation libs.androidx.lifecycle.runtime.ktx
    // ViewModel
    implementation libs.androidx.lifecycle.viewmodel.ktx
    // LiveData
    implementation libs.androidx.lifecycle.livedata.ktx
    // Saved state module for ViewModel
    implementation libs.androidx.lifecycle.viewmodel.savedstate
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation libs.androidx.lifecycle.common.java8
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation libs.androidx.lifecycle.service
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation libs.androidx.lifecycle.process
    // optional - ReactiveStreams support for LiveData
    implementation libs.androidx.lifecycle.reactivestreams.ktx
    // optional - Test helpers for Lifecycle runtime
    testImplementation libs.androidx.lifecycle.runtime.testing
    // optional - Test helpers for LiveData
    implementation libs.androidx.arch.core.common
    implementation libs.androidx.arch.core.runtime
    implementation libs.androidx.arch.core.testing
    // Java language implementation
    implementation libs.savedstate
    // Kotlin
    implementation libs.savedstate.ktx


    // Room components
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    annotationProcessor libs.androidx.room.compiler
    // To use Kotlin Symbol Processing (KSP)
    ksp libs.androidx.room.compiler



    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}