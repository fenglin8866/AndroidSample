java基础知识
1、一个集合放入另一个集合，放入的是集合引用还是元素？
 验证结论：是元素

Dagger实现总结
设计知识点
1、面向接口编程。接口定义，变量类型，方法参数
2、单例，建造者模式，工厂模式
3、泛型，内部类，修饰符（final，static）
4、编码规范：命名，设计思路

================================
核心结构
===========
注入容器
注入器
依赖工厂
================================================
场景：


===================
注意点：
 A @Module may not contain both non-static and abstract binding methods
 @module不能同时包含非静态和抽象绑定方法
 解决：
 1、所有@Bind定义为一个@Module的接口类
 2、将@Bind转换为@Provider方法

 ============================================
 工厂方法
 单例模式：静态内部类，静态方法


//============================================================
xxxComponent接口类：定义依赖关系
1、添加相关model类型
2、定义传入被依赖类型的方法（推荐）
3、定义返回依赖类型的方法

=====================================
设计思路非常巧妙：复用，职责单一，面向接口编程，功能交互
Factory：提供依赖对象。工厂模式，提供对象，封装对象的构建。统一构造方法，Model类，对象的封装性
    1、所有的依赖对象必须从Factory获取
    2、层层依赖的处理，添加Provider对象，封装自身，不关心依赖项的构建，依赖的构建相关独立。需要依赖使用Provider获取。

MembersInjector:定义依赖关系，使用接口变量，减少不必要的逻辑，保持通用性，简洁性。
Component：注入容器。组装依赖对象与被依赖对象。对外提供组装调用



依赖的对象类型。
    用构造方法构建，
    不能构造方法构建：

    构建是需要传递参数


//=======================================================================
Component
1、依赖关系

2、SubComponent
类似父类与子类的关系，
SubComponent能访问Component所有依赖，Component不能访问SubComponent
SubComponent必须依赖Component构建，不能独立构建。
代码实现：Component的实现对象传入SubComponent的实现对象。

3、@Factory和@Builder
可以应用于Component和SubComponent。
类名和方法名可以任意命名，注意参数类型和返回类型的一致性。

作用：
区别：builder方法只能是一个参数。create方法可以多参数


4、@BindsInstance
a、修饰方法时，只能有一个参数。
b、修饰参数时，可以有多个参数。


=============================
@Named：不能修饰构造方法，修饰@Providers注解的方法


Lazy<>:懒加载的使用。

构造方法和Model提供对象，优先使用Model。

===============================
@Scope：针对多线程

@Reusable:针对单线程
为了实现对象的复用，dagger2还提供了@Reusable注解，这个注解不会定义一个作用域，因此不是配套使用的，
它只要对提供方法进行修饰就好。这个注解提供的复用，不是严格的同步单例，只是一个“尽量复用”逻辑。


=========================
使用构造函数注入（通过 @Inject）时，应在类中添加作用域注解；使用 Dagger 模块时，应在 @Provides 方法中添加作用域注解。


标记需要的依赖对象属性 不能为private
model类可以包含其他model类。










